package com.rsons.application.connecting_thoughts;

/**
 * Created by ankit on 2/4/2018.
 */


import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.Snackbar;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseException;
import com.google.firebase.FirebaseTooManyRequestsException;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthProvider;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.SetOptions;
import com.google.firebase.iid.FirebaseInstanceId;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public class LoginActivity extends AppCompatActivity  implements
        View.OnClickListener {

    String TERMS_AND_Condition=" Terms and Conditions :\n" +
            "\n" +
            " General\n" +
            "In terms of Information Technology Act, 2000, this document is an electronic record. Being generated by a computer system it does not require any physical or digital signatures.\n" +
            "\n" +
            "This document is published in accordance with the provisions of Rule 3 (1) of the Information Technology (Intermediaries guidelines) Rules, 2011 that require publishing the rules and regulations, privacy policy and Terms of Service for access or usage of Connecting Thoughts\n" +
            "\n" +
            "Android application Connecting Thoughts is owned by rsons developers (hereinafter referred to as the “Private company”) satna Madhya Pradesh, India.\n" +
            "\n" +
            "The use of this application by You is solely governed by this policy and any policy so mentioned by terms of reference. Moving past home page, or using any of the services shall be taken to mean that You have read and agreed to all of the policies so binding in You and that You are contracting with the application policy and have undertaken binding obligations with the application .\n" +
            "\n" +
            "For the purpose of these Terms of Service, wherever the context so requires “You” or “User” or “Contributor” shall mean any natural or legal person who has agreed to become a member on the connecting thoughts by providing Data while registering on the application. The services in certain areas of the application do not require registration but that does not absolve You of the contractual relationship. The term “We”, “Us”, “Our” shall mean Connecting Thoughts.\n" +
            "\n" +
            "You will be subject to the rules, guidelines, policies, terms, and conditions applicable to any service that is provided by this application, and they shall be deemed to be incorporated into this Terms of Service and shall be considered as part and parcel of this Terms of Service.\n" +
            "\n" +
            "We hold the sole right to modify the Terms of Service without prior permission from You or informing You. The relationship creates on You a duty to periodically check the terms and stay updated on its requirements. If You continue to use the application following such a change, this is deemed as consent by You to the so amended policies. As long as You comply with these Terms of Service, We grant You a personal, non-exclusive, non-transferable, limited privilege to enter and use the application.\n" +
            "\n" +
            "By impliedly or expressly accepting these Terms of Service, You also accept and agree to be bound by other applications Policies, inter alia Privacy Policy, which would be amended from time to time.\n" +
            "\n" +
            "APPLICATION – A PLATFORM\n" +
            "Connecting Thoughts is a micro-publishing platform where any person can publish thoughts, short-stories, poems, remarkable creations or there whole day story in English or any other Indian language of their choice. Connecting thoughts also provide the facility to its users to get connected with his readers. Reader can send connection request to author or any other user of connecting thoughts and can able start conversation with them.9 (hereinafter referred to as “Service”).\n" +
            "We do not review or monitor any Application  linked to the Service and is not responsible for the content of any such linked application. Connecting Thoughts is providing these links solely as a convenience and inclusion of such links is not meant to imply that we endorse any third party application or any content, products or services available on a third party application. Your linking to such application is at your own risk.\n" +
            "\n" +
            "We reserve the right to constitute different classes of Users of the Service, granting access to certain areas of the Service only to certain Users. The content available through the Service may be displayed, and downloaded for your personal, internal and non-commercial use if such an option is explicitly available in the application. You agree not to modify, reproduce, retransmit, distribute, disseminate, sell, publish, broadcast, perform or circulate any such material without the prior written permission of Connecting Thoughts.\n" +
            "\n" +
            "\n" +
            "ELIGIBILITY\n" +
            "The User represents and warrants that he/she is competent and eligible to enter into legally binding agreements and that he/she has the requisite authority to bind himself/herself to these Terms, as determined solely by the provisions of the Indian Contract Act, 1872. The User may not use this Application if he/she is not competent to contract under the Indian Contract Act, 1872, or is disqualified from doing so by any other applicable law, rule or regulation currently in force. If You are a minor and wish to use the Application, You may do so through Your legal guardian.\n" +
            "\n" +
            " REGISTRATION OBLIGATIONS\n" +
            "In order for you to access certain portions of the Service, you are required to register and provide a valid email address in the required place of the application. In order to provide the Service, We may send you certain communications via email, telephone or any other means of communication provided to us by the user about the Service and you acknowledge and agree that receipt of these communications is consideration for access to portions of the Service which you cannot opt out of. If you do not wish to receive these communications, do not register for the Service.\n" +
            "You also agree to provide true, accurate, current and complete information about yourself and promptly update the Registration Data to ensure it is true, accurate, current and complete. If you provide any information that is false, inaccurate, not current or incomplete, or we have reasonable grounds to suspect that such information is false, inaccurate, not current or incomplete, we have the right to suspend or terminate your account and refuse any and all current or future use of the Service (or any portion thereof).\n" +
            "\n" +
            "MEMBER CONDUCT\n" +
            "The User undertakes to fulfil the following obligations and failure to satisfy the said obligations would entail the immediate and permanently suspension of the User s account and/or claim damages for any losses that accrued to us or additional costs that may be imposed on us as a result of the actions of the User.\n" +
            "You agree to provide genuine credentials during the process of registration.\n" +
            "\n" +
            "You agree to ensure the email address provided in your registration form is valid at all times and shall keep your contact information accurate and up-to-date.\n" +
            "You agree to comply with all local laws and regulations governing the use of the application, including, without limitation to, any usage rules set forth in this Agreement.\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree that you are solely responsible for maintaining the confidentiality of your account password. You agree to notify us immediately of any unauthorized use of your account. We reserve the right to close your account at any time for any or no reason.\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree to comply with all local laws and regulations governing the, installation and/or use of the application, including, without limitation to, any usage rules set forth in this Agreement.\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree and undertake that you are accessing the application at your sole risk and that you are using your best and prudent judgment before availing any Services listed on the application, or accessing/using any information displayed thereon.\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to use the Services to harm, threaten, or harass another person, organization, or Connecting Thoughts. In addition, you agree not to: damage, disable, overburden, or impair the Services (or any network connected to the Services); redistribute the Services or any part of it; use any unauthorized means to modify, reroute, or gain access to the Services or attempt to carry out these activities; or use any automated process or service to access or use the Services.\n" +
            "\n" +
            "\n" +
            "\n" +
            "You also agree that you will not and will not encourage or assist any third party to modify, alter, tamper with, repair or otherwise create derivative works of any Software;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to reverse engineer, disassemble or decompile the software used to provide or access the Services, including the Software, or attempt to discover or recreate the source code used to provide or access the Services, except and only to the extent that the applicable law expressly permits doing so;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to use the Services in any manner or for any purpose other than as expressly permitted by these Terms of Use, the Privacy Policy, any Documentation or any other policy, instruction or terms applicable to the Services that are available on the Services (“Policies”);\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to remove, obscure or alter any proprietary rights notice pertaining to the Services;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to access or use the Services in a way intended to improperly avoid incurring fees or exceeding usage limits or quotas;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to use the Services in connection with the operation of nuclear facilities, aircraft navigation, communication systems, medical devices, air traffic control devices, real time control systems or other situations in which the failure of the Services could lead to death, personal injury, or physical property or environmental damage;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to use the Services to:\n" +
            " engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data;\n" +
            "send unsolicited or unauthorized junk mail, spam, chain letters, pyramid schemes or any other form of duplicative or unsolicited messages, whether commercial or otherwise;\n" +
            "advertise or promote a commercial product or service that is not available through Connecting Thoughts;\n" +
            "store or transmit inappropriate Content, such as Content:\n" +
            "Abuse, harass, threaten, defame, disillusion, erode, abrogate, demean or otherwise violate the legal rights of any other person or entity;\n" +
            "Engage in any activity that interferes with or disrupts access to the Application or the services provided therein (or the servers and networks which are connected to the Application);\n" +
            "Impersonate any person or entity, or falsely state or otherwise misrepresent his/her affiliation with a person or entity;\n" +
            "Publish, post, disseminate, any information which is grossly harmful, harassing, blasphemous, defamatory, obscene, pornographic, paedophilic, libellous, invasive of another s privacy, hateful, or racially, ethnically objectionable, disparaging, relating or encouraging money laundering or gambling, or otherwise unlawful in any manner whatever under any law, rule or regulation currently in force; or unlawfully threatening or unlawfully harassing including but not limited to \"indecent representation of women\" within the meaning of the Indecent Representation of Women (Prohibition) Act, 1986;\n" +
            "Post any image/file/data that infringes the copyright, patent or trademark of another person or legal entity;\n" +
            "Upload or distribute files that contain viruses, corrupted files, or any other similar software or programs that may damage the operation of the Application;\n" +
            "Download any file posted/uploaded by another user of the Application that the User is aware, or should reasonably be aware, cannot be legally distributed in such a manner;\n" +
            "Probe, scan or test the vulnerability of the Application or any network connected to the Application, nor breach the security or authentication measures on the Application or any network connected to the Application. The User may not reverse look-up, trace or seek to trace any information relating to any other user of, or visitor to, the Application, or any other Buyer of the Application, including any user account maintained on the Application not operated/managed by the User, or exploit the Application or information made available or offered by or through the Application, in any manner;\n" +
            "Disrupt or interfere with the security of, or otherwise cause harm to, the Application, systems resources, accounts, passwords, servers or networks connected to or accessible through the Applications/Application or any affiliated or linked Applications;\n" +
            "Collect or store data about other users of the Application.\n" +
            "Use the Application or any Published Works or Content therein for any purpose that is unlawful or prohibited by these Terms, or to solicit the performance of any illegal activity or other activity which infringes the rights of this Application or any other third party(ies);\n" +
            "Violate any code of conduct or guideline which may be applicable for or to any particular Published Work made available on the Application;\n" +
            "Violate any applicable laws, rules or regulations currently in force within or outside India;\n" +
            "Violate any portion of these Terms or the Policy, including but not limited to any applicable additional terms of the Application contained herein or elsewhere, whether made by amendment, modification, or otherwise;\n" +
            "Threaten the unity, integrity, defence, security or sovereignty of India, friendly relations with foreign states, or public order, or cause incitement to the commission of any cognizable offence, or prevent the investigation of any offence, or insult any other nation.\n" +
            "Publish, post, or disseminate information that is false, inaccurate or misleading;\n" +
            "Directly or indirectly offer, attempt to offer, trade, or attempt to trade, any item the dealing of which is prohibited or restricted in any manner under the provisions of any applicable law, rule, regulation or guideline for the time being in force.\n" +
            "Commit any act that causes the Company to lose (in whole or in part) the services of its Internet Service Provider (\"ISP\") or in any manner disrupts the services of any other supplier/service provider of the Company/Application;\n" +
            "store or transmit any Content that contains or is used to initiate a denial of service  attack, software viruses or other harmful or deleterious computer code, files or programs such as Trojan horses, worms, time bombs, cancel bots, or spyware;\n" +
            "abuse, harass, stalk or otherwise violate the legal rights of a third party;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to interfere with or disrupt servers or networks used by Connecting Thoughts to provide the Services or used by other users’ to access the Services, or violate any third party regulations, policies or procedures of such servers or networks;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to access or attempt to access Connecting Thoughts other accounts, computer systems or networks not covered by these Terms of Use, through password mining or any other means;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to cause, in Connecting Thoughts sole discretion, inordinate burden on the Services or Connecting Thoughts system resources or capacity; or\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Services;\n" +
            "You agree not to engage in any activity that interferes with or disrupts access to the application or the Services (or the servers and networks which are connected to the application);\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to upload or distribute files that contain viruses, corrupted files, or any other similar software or programs that may damage the operation of the application;\n" +
            "\n" +
            "\n" +
            "You agree not to download any file posted in the application that you know, or reasonably should know, cannot be legally distributed in such manner;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to probe or scan or test the vulnerability of the application or any network, devices and software solutions to the application, nor breach the security or authentication measures on the application or any network, devices and software solutions connected to the application. You may not reverse look-up, trace or seek to trace any information on any other user, of or visitor to, the application, or exploit the application or Service or information made available or offered by or through the application, in any way whether or not the purpose is to reveal any information, including but not limited to personal identification information, other than Your own information, as provided for by the application;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to disrupt or interfere with the security of, or otherwise cause harm to, the application, systems resources, servers, software solutions or networks connected to or accessible through the application or any affiliated or linked Websites;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to use the Application or any material or content for any purpose that is unlawful or prohibited by these Terms of Use, or to solicit the performance of any illegal activity or other activity which infringes the rights of this application or other Third Parties;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to violate any applicable laws or regulations for the time being in force within or outside your home country;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to violate any code of conduct or other guidelines, which may be applicable for or to any particular Service;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to threaten the unity, integrity, defence, security or sovereignty of your home country, friendly relations with foreign states, or public order or causes incitement to the commission of any cognizable offence or prevents investigation of any offence or is insulting any other nation;\n" +
            "\n" +
            "\n" +
            "\n" +
            "You agree not to disseminate information through the application that is false, inaccurate or misleading, or violate any applicable laws or regulations for the time being in force in or outside your home country.\n" +
            "You shall not engage in advertising to, or solicitation of, other Users of the application to buy or sell any products or services, including, but not limited to, products or services related to that being displayed on the application or related to us., unless you have an explicit permission from us and operate within the guidelines and limitations set by us. You may not transmit any chain letters or unsolicited commercial or junk email to other Users via the application. It shall be a violation of these Terms of Service to use any information obtained from the application in order to harass, abuse, or harm another person, or in order to contact, advertise to, solicit, or sell to another person other than Us without Our prior explicit consent. We can (and You hereby expressly authorize Us to) disclose any information about You to law enforcement or other government officials, as we, in Our sole discretion, believe necessary or appropriate in connection with the investigation and/or resolution of possible crimes, especially those that may involve personal injury. In order to protect Our Users from such advertising or solicitation, We reserve the right to restrict the number of messages or emails which a user may send to other Users in any 24-hour period which We deem appropriate in its sole discretion. You understand that We have the right at all times to disclose any information (including the identity of the persons providing information or materials on the application) as necessary to satisfy any law, regulation or valid governmental request. This may include, without limitation, disclosure of the information in connection with investigation of alleged illegal activity or solicitation of illegal activity or in response to a lawful court order or subpoena.\n" +
            "We have no obligation to monitor the materials posted on the application. We shall have the right to remove or edit any content that in our sole discretion violates, or is alleged to violate, any applicable law or either the spirit or letter of these Terms of Service. Notwithstanding this right, You remain solely responsible for the content of the materials you post on the application and in your private messages. In no event shall We assume or have any responsibility or liability for any Content posted or for any claims, damages or losses resulting from use of Content and/or appearance of Content on the application. You hereby represent and warrant that You have all necessary rights in and to all Content which You provide and all information it contains and that such Content shall not infringe any proprietary or other rights of third parties or contain any libelous, tortuous, or otherwise unlawful information.\n" +
            "\n" +
            "FOR CONTRIBUTORS OF DOCUMENTS: If you contribute documents, articles or reviews in any form or media (“Documents”), you (“Contributor”) give us the necessary rights to edit and post and maintain your Document (and the edited version), and to prevent unauthorized use by end users of Documents that we edit. Users are given rights to read your Document, but no rights to republish or otherwise distribute your Document. Contributors agree and understand that once the document is shared with us or submitted to us, it means that they give us the full rights to use the same and also the document or details submitted by them mean that they have full rights to do the same, that is they own the rights for doing so while submitting and are not infringing the same. But document once submitted or shared with us means they are giving their full consent or approval for us to use it. If your Document has been previously published, that publisher may have rights, and if so, you must obtain all required consents before posting or submitting the Document on our application. If your Document contains images, audio, or video, we require that you have obtained consents from all persons depicted, seen, or heard, the owners of any places depicted, and any other rights holders. Connecting Thoughts shall not retain any rights in such Documents, or have any responsibility for the contents of such Documents. Connecting Thoughts will not be held liable for any wrongdoing by the Users submitting the content.\n" +
            "\n" +
            "FOR USERS OF DOCUMENTS: We require that you respect our Contributors. In general, all rights, except the right to read/view/listen to posted Documents for your personal non-commercial use are reserved to the Contributors, or to us. Connecting Thoughts shall not retain any rights in such Documents, or have any responsibility for the contents of such Documents.\n" +
            "\n" +
            "You are solely responsible for any and all data, documents, files, text, audio, video, images or other content or materials that you deliver, upload to or make accessible in the Solution (“Content”) and Connecting Thoughts will not review, share or distribute any Content except to the extent necessary to provide and upgrade the Services or as may be required by law. Except for material that we license to you, we don’t claim ownership of any Content that is transmitted, stored, or processed in your account(s). We also don’t control, verify, or endorse the Content that you or others make available on the Services.\n" +
            "\n" +
            "You hereby grant Connecting Thoughts a non-exclusive license to use, modify, adapt, reproduce, distribute and display your Content, but solely to the extent necessary to provide the Services or as otherwise permitted by these Terms of Use.\n" +
            "\n" +
            "You represent and warrant that: (a) you have all the rights in the Content necessary for you to use the Services and to grant the rights in this Section, and, (b) the storage, use or transmission of the Content will not violate these Terms of Use or applicable laws.\n" +
            "\n" +
            "You agree that you will: (a) promptly address and respond any notices or claims relating to the Content; and (b) maintain appropriate security, protection and backup copies of the Content, which may include your use of additional encryption technology to protect the Content from unauthorized access. Connecting Thoughts will have no liability of any kind as a result of the deletion of, correction of, destruction of, damage to, loss of or failure to store or encrypt any Content.\n" +
            "\n" +
            "You will immediately notify Connecting Thoughts in writing of any unauthorized use of (a) any Content (b) your account, or (c) the Services and you agree to take reasonable steps to terminate such unauthorized use. Upon Connecting Thoughts reasonable request, you will cooperate with and provide assistance to Connecting Thoughts in connection with any such unauthorized use. Connecting Thoughts reserves the right to block or otherwise prevent delivery of any Content if, in Connecting Thoughts sole discretion, such Content violates these Terms of Use.\n" +
            "\n" +
            "The Solution includes certain functionality that allows you to control access to your Content. Please review your account settings prior to using and accessing the Solution and make any modifications that you deem necessary or appropriate to control access to your Content by third parties.\n" +
            "\n" +
            "We retain the right to block or otherwise prevent delivery of any Content to or from the Service as part of our efforts to protect the Services, protect our customers, or stop you from breaching these Terms of Use. The technology or other means we use may hinder or disable your use of the Services.\n" +
            "\n" +
            " COMMENTS POSTED TO THE APPLICATION\n" +
            "\n" +
            "Connecting Thoughts has no obligation to monitor its Services or to review or moderate any messages, comments or material submitted or posted to the Application, and any ratings and reviews of Contributors (“Comments”). However, Connecting Thoughts reserves the right and sole discretion to review, delete or modify Comments, to publish, remove or block access to any Comments that are available through the application, for any reason whatsoever, at any time.\n" +
            "\n" +
            "In addition to the foregoing restrictions on the use of the Services, those reading and posting Comments on the application agree that any Comments posted on the application are provided solely by the posting individual, and Connecting Thoughts is in no way responsible for the content of any Comments or for the use or non-use of Comments.\n" +
            "\n" +
            "Connecting Thoughts reserves the right (but is not obligated) to do any or all of the following:\n" +
            "Record or monitor any Comments.\n" +
            "Investigate an allegation that any Comments do not comply with the TOS and determine in its sole discretion to remove or request the removal of the Comments.\n" +
            "Delete, move or edit Comments that Developer Media determines in its sole discretion violates the TOS or the spirit of Developer Media, including Comments that are abusive, defamatory, and obscene, violate intellectual property rights, or are illegal, disruptive, or otherwise unacceptable for any reason.\n" +
            "Terminate a user s access to any or all of the Services or the application.\n" +
            "Connecting Thoughts reserves the right to take any action it deems necessary to protect the personal safety of our guests, members or the public and to maintain the integrity of the Developer Media community.\n" +
            "\n" +
            "\n" +
            " NOTICES\n" +
            "Any and all communication relating to any dispute or grievance experienced by the User may be communicated to us by the User reducing the same to writing, and sending by Registered Post, or send an email to rsonsdevelopers@gmail.com.\n" +
            "\n" +
            " INTELLECTUAL PROPERTY RIGHTS\n" +
            "1.All rights related to the application  design, text, graphics and other content, the selection and arrangements are licensed to the Company. The content of this application is protected by international copyright laws and other intellectual property rights. All company names and logos mentioned in this application are the trademarks, service-marks or trading names of their respective owners, including us. You may not modify, copy, reproduce, republish, upload, post, transmit or distribute by any means or in any manner, any material or information on the application or downloaded from this application including but not limited to text, graphics, video, messages, code and/or software without Our prior written consent, except where expressly invited to do so.\n" +
            "\n" +
            "2. You may not, republish any portion of the content on any Internet, Intranet or extranet application or incorporate the content in any database, compilation, archive or cache. You may not distribute any content to others, whether or not for payment or other consideration, and you may not modify copy, frame, cache, reproduce, sell, publish, transmit, display or otherwise use any portion of the content. You may not scrape or otherwise copy our content without permission. You agree not to decompile, reverse engineer or disassemble any software or other Services or processes accessible through the application, not to insert any code or manipulate the content of the application in any way that affects the user s experience, and not to use any data mining, data gathering or extraction method.\n" +
            "\n" +
            "3. You may not use any of our intellectual property in any manner that is likely to cause confusion among Users, or in any manner that disparages or discredits us in any way.\n" +
            "\n" +
            "4.If you believe your work has been copied in a way that constitutes infringement or are aware of any infringing material on the application, please email us at rsonsdevelopers@gmail.com\n" +
            "\n" +
            "INTELLECTUAL PROPERTY COMPLAINTS\n" +
            "We respect the intellectual property of others. If You believe Your work has been copied in a way that constitutes infringement or are aware of any infringing Published Works on the Application, you can report the infringement by clicking the Report option on the Application and by emailing us at rsonsdevelopers@gmail.com and by providing the following: A statement that you have identified content on the Platform that infringes your copyright or the copyright of a third party on whose behalf you are entitled to act; A description of the copyright work that you claim has been infringed; A description of the content that you claim is infringing and details of where on the Platform the content that you claim is infringing may be found; Your contact information including your full name, address and telephone number and a valid email address on which you can be contacted; A statement by you that you have a good faith belief that the disputed use of the Published Works is not authorized by the copyright owner, its agent, or the law; A statement by you that the information in your notice is accurate and that you are authorized to act on behalf of the owner of the exclusive right that is allegedly infringed. Your electronic or physical signature (which may be a scanned copy). By providing information to, communicating with, and/or placing Published Works on, the Application, including for example but not limited to, communication during any registration and communication on the bulletin board, message or chat area, You represent and warrant: You own or otherwise have all necessary rights to the Published Works you provide and the rights to use it as provided in this Terms of Service; all information You provide is true, accurate, current and complete, and does not violate these Terms of Service; and, the information and content shall not cause injury to any person or entity. Using a name other than your own legal name is prohibited (except in those specific areas of the Application that specifically ask for unique, fictitious names such as, inter alia certain message boards and chat rooms). For all such information and Published Works, you grant us, a royalty-free, perpetual, irrevocable, non-exclusive right and license to use, copy, modify, display, archive, store, distribute, reproduce and create derivative works from such information, in any form, media, software or technology of any kind now existing or developed in the future. Without limiting the generality of the previous sentence, you authorize us to share the information across all our affiliated Applications, to include the information in a searchable format accessible by users of the Application and other affiliated Applications, and to use your name and any other information in connection with its use of the Published Works you provide. You also grant the right to use any Published Works, information, ideas, concepts, know-how or techniques contained in any communication you send to us for any purpose whatsoever, including but not limited to developing, manufacturing and marketing Published Works using such information. All rights in this paragraph are granted without the need for additional compensation of any sort to you.\n" +
            "CONSENT TO PUBLISH AND COPYRIGHT\n" +
            "Contributors must grant the Company specific permission to publish their work. All stories/poetries/thoughts (hereinafter “Content”) published on the application shall be protected under the Copyright laws. This copyright covers the exclusive rights to reproduce and distribute the Content, including in electronic forms, reprints, translations, photographic reproductions, or similar. Except for the Content published on an open access basis, the transfer of copyright to the Company becomes effective when the Content is accepted for publication on the application.\n" +
            "\n" +
            "OBLIGATIONS OF THE USER\n" +
            "Except as expressly permitted by the other provisions of this notice,\n" +
            "●     You must not download any material from our application or transmit it or store it in any other application or other form of electronic retrieval system.\n" +
            "\n" +
            "●     You must not edit or otherwise modify any material on our application.\n" +
            "●     You may only use our application for your own personal use and must not distribute or commercially exploit the content.\n" +
            "\n" +
            "●     You may view all contents of the application for free, which have been published by their respective Authors.\n" +
            "\n" +
            "SECURITY\n" +
            "As a registered user or subscriber, you agree not to\n" +
            "●     Copy, publish or redistribute full text articles, photographs, graphics, tables or images in any way (except as permitted by any sharing tools we make available).\n" +
            "\n" +
            "●     Create derivative works from our content, Remove the copyright or trademark notice from any copies of our Content, create a database in electronic or structured manual from by systematically and/or regularly downloading, caching, printing and storing all or any of our Content (by spidering or otherwise), frame, harvest or scrape our Content or otherwise access the Content for similar purposes.\n" +
            "\n" +
            "●     We as well as the Authors will jointly have a copyright over all the literary contents uploaded on the Application. The Author, if he deems fit, may edit his creations and re-upload it on the application. In such a case, we as well as the Authors will have a joint copyright over the older as well as the edited version of the literary content.\n" +
            "\n" +
            "REPORT ABUSE\n" +
            "●     If you learn of any unlawful material or activity on our application, or any material or activity that breaches this notice, please let us know.\n" +
            "●     You can let us know about any such material or activity by emailing us at rsonsdevelopers@gmail.com\n" +
            "ENFORCEMENT OF COPYRIGHT\n" +
            "We take the protection of our copyright very seriously. Repeated violation of the clauses enumerated in this notice may first lead to a warning and then a complete ban on the use of the application itself. If we discover that you have used our copyright materials in contravention of the license set out in this notice, we may bring legal proceedings against you, seeking monetary damages and/or an injunction to stop you using those materials. You could also be ordered to pay legal costs\n" +
            "\n" +
            "We take the protection of our copyright very seriously. Repeated violation of the clauses enumerated in this notice may first lead to a warning and then a complete ban on the use of the application itself. If we discover that you have used our copyright materials in contravention of the license set out in this notice, we may bring legal proceedings against you, seeking monetary damages and/or an injunction to stop you using those materials. You could also be ordered to pay legal costs\n" +
            "\n" +
            " TERM AND TERMINATION\n" +
            "Connecting Thoughts may immediately terminate the Service if you fail to abide by the terms of these Terms of Service. In addition, Connecting Thoughts may, but has no duty to, immediately terminate the Service if Connecting Thoughts in its sole discretion concludes that you are engaged in fraudulent or illegal activities, sharing account with unauthorized users, or activities that may damage the rights of Connecting Thoughts or others. Termination of the Service may result in the deactivation or deletion of your Connecting Thoughts account.\n" +
            "\n" +
            "Connecting Thoughts may ban repeated offenders of copyright after due warning has been given to such a User. Users who use abusive language or are hate speech mongers and spammers will be banned by Connecting Thoughts without giving any warning and with immediate effect from posting posts on the application or using any further Services on the application.\n" +
            "\n" +
            "\n" +
            " DISCLAIMER OF WARRANTIES\n" +
            "You expressly understand and agree that the Service is provided 'as is' and Connecting Thoughts does not warrant the accuracy, completeness, marketability, fitness for a particular purpose, or title to any of the data or function in its application, any of the data or function linked to its application, any data or function provided by partners or vendors of this application, or any service provided herewith; nor does WritersCafe.org assume any responsibility for the timeliness, deletion, mis-delivery or failure to store any user communications or personalization settings. Connecting Thoughts does not warrant that code, content, files, access, functions or any combination thereof are free of errors or corruptions.\n" +
            "\n" +
            " RESERVATION OF RIGHTS\n" +
            "The Service and its benefits are offered at the discretion of Connecting Thoughts, and Connecting Thoughts alone has the right to modify or discontinue, temporarily or permanently, the Service, in whole or in part for any reason, at its sole discretion, with or without notice to you. You agree that Connecting Thoughts will not be liable to you or any third-party for any modification or discontinuance of the Service. Connecting Thoughts, in its sole discretion, may add, delete, or change some or all of the features of the Service at any time.\n" +
            "\n" +
            "You acknowledge that Connecting Thoughts has the right (but not the obligation) in its sole discretion to pre-screen, refuse, or move any Content that is available via the Service. Without limiting the foregoing, Connecting Thoughts shall have the right to edit, refuse to post or remove any Content that violates these Terms of Service or is otherwise objectionable.\n" +
            "\n" +
            "INDEMNIFICATION AND LIMITATION OF LIABILITY\n" +
            "\n" +
            "The User hereby expressly agrees to defend, indemnify and hold harmless the Application and the Company, its parent, subsidiaries, affiliates, employees, directors, officers, agents and their successors and assigns and against any and all claims, liabilities, damages, losses, costs and expenses, including attorney s fees, caused by or arising out of claims based upon the User s actions or inactions, including but not limited to any warranties, representations or undertakings, or in relation to the non-fulfilment of any of the User s obligations under this Agreement, or arising out of the User s infringement of any applicable laws, rules and regulations, including but not limited to infringement of intellectual property rights, payment of statutory dues and taxes, claims of libel, defamation, violation of rights of privacy or publicity, loss of service by other subscribers, or the infringement of any other rights of a third party. In no event shall the Company/Application be liable to compensate the User or any third party for any special, incidental, indirect, consequential or punitive damages whatsoever, including those resulting from loss of use, data or profits, whether or not foreseeable, and whether or not the Company/Application had been advised of the possibility of such damages, or based on any theory of liability, including breach of contract or warranty, negligence or other tortuous action, or any other claim arising out of or in connection with the User s use of or access to the Application and/or the Services or Published Works contained therein. The limitations and exclusions in this section apply to the maximum extent permitted by applicable law, and the Parties expressly agree that in the event of any statute, rule, regulation or amendment coming into force that would result in the Company/Application incurring any form of liability whatsoever, these Terms and the Policy will stand terminated one (1) day before the coming into effect of such statute, rule, regulation or amendment. It is further agreed to by the Parties that the Contents of this Section shall survive even after the termination or expiry of the Terms and/or Policy.\n" +
            "\n" +
            "\n" +
            "MISCELLANEOUS PROVISIONS:\n" +
            "Entire Agreement: This Agreement is the complete and exclusive statement of the agreements between you and us with respect to the subject matter hereof and supersedes all other communications or representations or agreements (whether oral, written or otherwise) relating thereto.\n" +
            "\n" +
            "Waiver: The failure of either party at any time to require performance of any provision of this Agreement in no manner shall affect such party s right at a later time to enforce the same. No waiver by either party of any breach of this Agreement, whether by conduct or otherwise, in any one or more instances, shall be deemed to be, or construed as, a further or continuing waiver of any other such breach, or a waiver of any other breach of this Agreement.\n" +
            "\n" +
            "Severability: If any provision of this Agreement shall to any extent be held invalid, illegal or unenforceable, the validity, legality and enforceability of the remaining provisions of this Agreement shall in no way be affected or impaired thereby and each such provision of this Agreement shall be valid and enforceable to the fullest extent permitted by law. In such a case, this Agreement shall be reformed to the minimum extent necessary to correct any invalidity, illegality or unenforceability, while preserving to the maximum extent the rights and commercial expectations of the parties hereto, as expressed herein.\n" +
            "\n" +
            "\n" +
            "CONTACT US\n" +
            "If you have any questions about this Agreement, the practices of Connecting Thoughts, or your experience with the Service, you can email us at rsonsdevelopers@gmail.com .\n" +
            "\n" +
            "\n" +
            "\n" +
            "\n" +
            "\n";

    private static final String TAG = "PhoneAuthActivity";

    private static final String KEY_VERIFY_IN_PROGRESS = "key_verify_in_progress";

    private static final int STATE_INITIALIZED = 1;
    private static final int STATE_CODE_SENT = 2;
    private static final int STATE_VERIFY_FAILED = 3;
    private static final int STATE_VERIFY_SUCCESS = 4;
    private static final int STATE_SIGNIN_FAILED = 5;
    private static final int STATE_SIGNIN_SUCCESS = 6;
    private static final int RC_SIGN_IN = 10;

    // [START declare_auth]
    private FirebaseAuth mAuth;
    // [END declare_auth]

    private boolean mVerificationInProgress = false;
    private String mVerificationId;
    private PhoneAuthProvider.ForceResendingToken mResendToken;
    private PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks;

    private ViewGroup mPhoneNumberViews;
    private ViewGroup mSignedInViews;

    //private TextView mStatusText;
    //private TextView mDetailText;

    private EditText mPhoneNumberField;
    private EditText mVerificationField;
    //private EditText UserName;
    public static String PhoneNumber;

    private RelativeLayout mStartButton;
    private RelativeLayout mVerifyButton;
    private TextView mResendButton;
    private Button mSignOutButton;
    private RelativeLayout PhoneNumberLayout,VerificationLayout;
    //ProgressBar progressBar;
    TextView Verification_code;

    private TextView OneText,TwoText,ThreeText;
    private ImageView first_line,second_line;

    private FirebaseFirestore mDatabase;
    private ProgressDialog mProgressDialog;
    CheckBox TermConditionCheck;
    SignInButton GoogleSignIn;
   private GoogleApiClient mGoogleApiClient;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        requestWindowFeature(Window.FEATURE_NO_TITLE);
        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);

        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();

        mGoogleApiClient=new GoogleApiClient.Builder(getApplicationContext())
                .enableAutoManage(this, new GoogleApiClient.OnConnectionFailedListener() {
                    @Override
                    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

                        Toast.makeText(LoginActivity.this,getString(R.string.SOMETHING_WENT_WRONG),Toast.LENGTH_SHORT).show();
                    }
                }).addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();


        mDatabase=FirebaseFirestore.getInstance();
        setContentView(R.layout.raw);


        if (savedInstanceState != null) {
            onRestoreInstanceState(savedInstanceState);
        }

        //progressBar = (ProgressBar) findViewById(R.id.progressBar);

        // Assign views
        GoogleSignIn= (SignInButton) findViewById(R.id.sign_in_button);
        mPhoneNumberViews = (ViewGroup) findViewById(R.id.phone_auth_fields);
        mSignedInViews = (ViewGroup) findViewById(R.id.signed_in_buttons);
        Verification_code= (TextView) findViewById(R.id.verification_text);

        OneText= (TextView) findViewById(R.id.first_text);
        TwoText= (TextView) findViewById(R.id.second_text);
        ThreeText= (TextView) findViewById(R.id.third_text);
        first_line= (ImageView) findViewById(R.id.first_line);
        second_line= (ImageView) findViewById(R.id.second_line);

        /*mStatusText = (TextView) findViewById(R.id.status);*/
        //mDetailText = (TextView) findViewById(R.id.detail);
        PhoneNumberLayout= (RelativeLayout) findViewById(R.id.phone_number_layout);
        VerificationLayout= (RelativeLayout) findViewById(R.id.verification_layout);

        mPhoneNumberField = (EditText) findViewById(R.id.field_phone_number);
        mVerificationField = (EditText) findViewById(R.id.field_verification_code);
        //UserName= (EditText) findViewById(R.id.enter_your_name);
        mStartButton = (RelativeLayout) findViewById(R.id.button_start_verification);
        mVerifyButton = (RelativeLayout) findViewById(R.id.button_verify_phone);
        mResendButton = (TextView) findViewById(R.id.button_resend);
        mSignOutButton = (Button) findViewById(R.id.sign_out_button);

        TextView TermsAndCondition= (TextView) findViewById(R.id.terms_condition);
        TermConditionCheck= (CheckBox) findViewById(R.id.terms_and_condition_check);

        TermsAndCondition.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ShowTermsAndConditionDialog();
            }
        });

        GoogleSignIn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!TermConditionCheck.isChecked()){
                    Toast.makeText(LoginActivity.this,getString(R.string.PLEASE_ACCEPT_TERMS_AND_CONDITIOIN),Toast.LENGTH_SHORT).show();
                    return;
                }

                signIn();
            }
        });


        mResendButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.e("sdfsfs","Click on Otp resend");
                if(mPhoneNumberField.getText().length()<10){
                    Toast.makeText(LoginActivity.this,getString(R.string.ENTER_VELID_NUMBER),Toast.LENGTH_SHORT).show();
                }else {
                    resendVerificationCode("+91"+mPhoneNumberField.getText().toString(), mResendToken);
                }
            }
        });

        // Assign click listeners
        mStartButton.setOnClickListener(this);
        mVerifyButton.setOnClickListener(this);
        mResendButton.setOnClickListener(this);
        mSignOutButton.setOnClickListener(this);

        // [START initialize_auth]
        mAuth = FirebaseAuth.getInstance();

        mProgressDialog=new ProgressDialog(LoginActivity.this);

        //mProgressDialog.setTitle("Please wait..!!");
        mProgressDialog.setMessage("Please wait..!!");
        mProgressDialog.setCanceledOnTouchOutside(false);
        mProgressDialog.setCancelable(false);

        // [END initialize_auth]

        // Initialize phone auth callbacks
        // [START phone_auth_callbacks]
        mCallbacks = new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {

            @Override
            public void onVerificationCompleted(PhoneAuthCredential credential) {
                // This callback will be invoked in two situations:
                // 1 - Instant verification. In some cases the phone number can be instantly
                //     verified without needing to send or enter a verification code.
                // 2 - Auto-retrieval. On some devices Google Play services can automatically
                //     detect the incoming verification SMS and perform verificaiton without
                //     user action.
                Log.d(TAG, "onVerificationCompleted:" + credential);
                // [START_EXCLUDE silent]
                mVerificationInProgress = false;
                // [END_EXCLUDE]

                // [START_EXCLUDE silent]
                // Update the UI and attempt sign in with the phone credential
                updateUI(STATE_VERIFY_SUCCESS, credential);
                // [END_EXCLUDE]
                signInWithPhoneAuthCredential(credential);
            }

            @Override
            public void onVerificationFailed(FirebaseException e) {
                // This callback is invoked in an invalid request for verification is made,
                // for instance if the the phone number format is not valid.
                Log.w(TAG, "onVerificationFailed", e);
                // [START_EXCLUDE silent]
                mVerificationInProgress = false;
                // [END_EXCLUDE]

                if (e instanceof FirebaseAuthInvalidCredentialsException) {
                    // Invalid request
                    // [START_EXCLUDE]
                    mPhoneNumberField.setError("Invalid phone number.");
                    // [END_EXCLUDE]
                } else if (e instanceof FirebaseTooManyRequestsException) {
                    // The SMS quota for the project has been exceeded
                    // [START_EXCLUDE]
                    Snackbar.make(findViewById(android.R.id.content), "Quota exceeded.",
                            Snackbar.LENGTH_SHORT).show();
                    // [END_EXCLUDE]
                }

                // Show a message and update the UI
                // [START_EXCLUDE]
                updateUI(STATE_VERIFY_FAILED);
                // [END_EXCLUDE]
            }

            @Override
            public void onCodeSent(String verificationId,
                                   PhoneAuthProvider.ForceResendingToken token) {
                // The SMS verification code has been sent to the provided phone number, we
                // now need to ask the user to enter the code and then construct a credential
                // by combining the code with a verification ID.
                Log.d(TAG, "onCodeSent:" + verificationId);

                // Save verification ID and resending token so we can use them later
                mVerificationId = verificationId;
                mResendToken = token;

                // [START_EXCLUDE]
                // Update UI
                updateUI(STATE_CODE_SENT);
                // [END_EXCLUDE]
            }
        };
        // [END phone_auth_callbacks]
    }

    private void signIn() {

        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }


    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);
        if (requestCode == RC_SIGN_IN) {
            GoogleSignInResult result= Auth.GoogleSignInApi.getSignInResultFromIntent(data);

            if (result.isSuccess()){
                GoogleSignInAccount account=result.getSignInAccount();
                mProgressDialog.setMessage(getString(R.string.PLEASE_WAIT));
                mProgressDialog.show();
                firebaseAuthWithGoogle(account);
            }else {
                Toast.makeText(LoginActivity.this,getString(R.string.SOMETHING_WENT_WRONG),Toast.LENGTH_SHORT).show();
            }
           /* Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            try {
                // Google Sign In was successful, authenticate with Firebase
                GoogleSignInAccount account = task.getResult(ApiException.class);

            } catch (ApiException e) {
                // Google Sign In failed, update UI appropriately
                Log.w(TAG, "Google sign in failed", e);
                // ...
            }*/
        }
    }

    private void firebaseAuthWithGoogle(final GoogleSignInAccount acct) {
        Log.d(TAG, "firebaseAuthWithGoogle:" + acct.getId());

        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
        if (credential==null){
            Toast.makeText(LoginActivity.this,R.string.GOOGLE_AUTH_FAILED,Toast.LENGTH_LONG).show();
            return;
        }
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information
                            Log.d(TAG, "signInWithCredential:success");
                            //FirebaseUser user = mAuth.getCurrentUser();

                            final FirebaseUser user = mAuth.getCurrentUser();
                            final String user_id=user.getUid();
                            final DocumentReference dataRef = mDatabase.collection("Users").document(user_id);

                            dataRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {
                                @Override
                                public void onEvent(@Nullable DocumentSnapshot snapshot,
                                                    @Nullable FirebaseFirestoreException e) {
                                    if (e != null) {

                                        Toast.makeText(LoginActivity.this,"db is empty",Toast.LENGTH_SHORT).show();
                                        Log.w(TAG, "Listen failed.", e);
                                        //return;
                                    }
                                    if (snapshot != null && snapshot.exists()){
                                        String device_Token= FirebaseInstanceId.getInstance().getToken();
                                        Map<String, Object> User = new HashMap<>();
                                        User.put("device_token",device_Token);
                                        //User.put("name", acct.getDisplayName());
                                        User.put("email",acct.getEmail());
                                        //User.put("lower_case_name",acct.getDisplayName().toLowerCase());
                                        mDatabase.collection("Users").document(user_id).set(User, SetOptions.merge()).addOnCompleteListener(new OnCompleteListener<Void>() {
                                            @Override
                                            public void onComplete(@NonNull Task<Void> task) {
                                                if (task.isSuccessful()){
                                                    Log.e("hjdhfjhsdfskf","start calling suggestion list");
                                                    //PutTitle_into_Search_SuggestionList(Const.getFreshCapatibleStringToJson(acct.getDisplayName()));
                                                    updateUI(STATE_SIGNIN_SUCCESS, user);
                                                }
                                            }
                                        });

                                    }else {
                                        String device_Token= FirebaseInstanceId.getInstance().getToken();

                                        Map<String, Object> User = new HashMap<>();
                                        User.put("name", acct.getDisplayName());
                                        User.put("image", "default");
                                        User.put("thumb_image", "default");
                                        User.put("status","I love connecting thoughts");
                                        User.put("email",acct.getEmail());
                                        User.put("dob","");
                                        User.put("phone_no","");
                                        User.put("gender","");
                                        User.put("device_token",device_Token);
                                        User.put("lower_case_name",acct.getDisplayName().toLowerCase());

                                        mDatabase.collection("Users").document(user_id).set(User, SetOptions.merge()).addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void aVoid) {
                                                Log.e("hjdhfjhsdfskf","this is onsuccess listener ");
                                                PutTitle_into_Search_SuggestionList(Const.getFreshCapatibleStringToJson(acct.getDisplayName()));
                                                updateUI(STATE_SIGNIN_SUCCESS, user);
                                            }
                                        }).addOnFailureListener(new OnFailureListener() {
                                            @Override
                                            public void onFailure(@NonNull Exception e) {
                                                Log.e("hjdhfjhsdfskf","this is failure listener ");
                                                Log.w(TAG, "Error writing document", e);
                                                mProgressDialog.hide();
                                                Toast.makeText(LoginActivity.this, R.string.auth_failed,
                                                        Toast.LENGTH_SHORT).show();
                                            }
                                        });
                                    }
                                }
                            });

                            //updateUI(user);
                        } else {
                            // If sign in fails, display a message to the user.
                            Log.w(TAG, "signInWithCredential:failure", task.getException());

                            Snackbar snackbar = Snackbar
                                    .make(findViewById(R.id.login_main_layout), getString(R.string.SOMETHING_WENT_WRONG), Snackbar.LENGTH_LONG);
                            TextView snack_tv = (TextView)snackbar.getView().findViewById(android.support.design.R.id.snackbar_text);
                            snackbar.getView().setBackgroundColor(ContextCompat.getColor(LoginActivity.this, R.color.colorAccent));
                            snack_tv.setGravity(Gravity.CENTER_HORIZONTAL);
                            snack_tv.setTextColor(ContextCompat.getColor(LoginActivity.this, R.color.white));
                            snackbar.show();
                            updateUI(null);
                        }

                        // ...
                    }
                });
    }


    public void ShowTermsAndConditionDialog(){
        AlertDialog.Builder builderInner = new AlertDialog.Builder(LoginActivity.this);
        builderInner.setTitle("Terms & Condition");
        builderInner.setMessage(TERMS_AND_Condition);

        builderInner.setNegativeButton("Accept", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                TermConditionCheck.setChecked(true);
                dialog.dismiss();
            }
        });
        builderInner.show();
    }

    // [START on_start_check_user]
    @Override
    public void onStart() {
        super.onStart();
        // Check if user is signed in (non-null) and update UI accordingly.
        FirebaseUser currentUser = mAuth.getCurrentUser();
        updateUI(currentUser);

        // [START_EXCLUDE]
        if (mVerificationInProgress && validatePhoneNumber()) {

            startPhoneNumberVerification(mPhoneNumberField.getText().toString());

        }
        // [END_EXCLUDE]
    }
    // [END on_start_check_user]

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putBoolean(KEY_VERIFY_IN_PROGRESS, mVerificationInProgress);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        mVerificationInProgress = savedInstanceState.getBoolean(KEY_VERIFY_IN_PROGRESS);
    }


    private void startPhoneNumberVerification(String phoneNumber) {
        // [START start_phone_auth]
        PhoneNumber=phoneNumber;
        phoneNumber="+91"+phoneNumber;
        try {
            PhoneAuthProvider.getInstance().verifyPhoneNumber(
                    phoneNumber,        // Phone number to verify
                    60,                 // Timeout duration
                    TimeUnit.SECONDS,   // Unit of timeout
                    this,               // Activity (for callback binding)
                    mCallbacks);
        }catch (Exception e){
            Toast.makeText(LoginActivity.this,getString(R.string.ENTER_VELID_NUMBER),Toast.LENGTH_SHORT).show();
        }
           // OnVerificationStateChangedCallbacks
        // [END start_phone_auth]

        mVerificationInProgress = true;
        /*mStatusText.setVisibility(View.INVISIBLE);*/
    }

    private void verifyPhoneNumberWithCode(String verificationId, String code) {
        // [START verify_with_code]
        PhoneAuthCredential credential = PhoneAuthProvider.getCredential(verificationId, code);
        // [END verify_with_code]
        signInWithPhoneAuthCredential(credential);

    }

    // [START resend_verification]
    private void resendVerificationCode(String phoneNumber,
                                        PhoneAuthProvider.ForceResendingToken token) {
        PhoneAuthProvider.getInstance().verifyPhoneNumber(
                phoneNumber,        // Phone number to verify
                60,                 // Timeout duration
                TimeUnit.SECONDS,   // Unit of timeout
                this,               // Activity (for callback binding)
                mCallbacks,         // OnVerificationStateChangedCallbacks
                token);             // ForceResendingToken from callbacks
    }
    // [END resend_verification]

    // [START sign_in_with_phone]
    private void signInWithPhoneAuthCredential(PhoneAuthCredential credential) {
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information


                            final FirebaseUser user = task.getResult().getUser();
                            // [START_EXCLUDE]


                            final String user_id=user.getUid();
                            final DocumentReference dataRef = mDatabase.collection("Users").document(user_id);

                            dataRef.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                                @Override
                                public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                                    if (task.isSuccessful()){
                                        DocumentSnapshot snapshot=task.getResult();
                                        if (snapshot != null && snapshot.exists()){
                                            String device_Token= FirebaseInstanceId.getInstance().getToken();
                                            Map<String, Object> User = new HashMap<>();
                                            User.put("device_token",device_Token);
                                            mDatabase.collection("Users").document(user_id).set(User, SetOptions.merge()).addOnCompleteListener(new OnCompleteListener<Void>() {
                                                @Override
                                                public void onComplete(@NonNull Task<Void> task) {
                                                    if (task.isSuccessful()){
                                                        updateUI(STATE_SIGNIN_SUCCESS, user);
                                                    }
                                                }
                                            });

                                        }else {
                                            String device_Token= FirebaseInstanceId.getInstance().getToken();

                                            Map<String, Object> User = new HashMap<>();

                                            /*if(UserName.getText().toString().length()>0){
                                                User.put("name", UserName.getText().toString());
                                            }else {

                                            }*/
                                            User.put("name", "New User");
                                            User.put("image", "default");
                                            User.put("thumb_image", "default");
                                            User.put("email","");
                                            User.put("dob","");
                                            User.put("status","I love connecting thoughts");
                                            User.put("phone_no","+91 "+PhoneNumber);
                                            User.put("gender","");
                                            User.put("device_token",device_Token);


                                            mDatabase.collection("Users").document(user_id).set(User, SetOptions.merge()).addOnSuccessListener(new OnSuccessListener<Void>() {
                                                @Override
                                                public void onSuccess(Void aVoid) {
                                                    updateUI(STATE_SIGNIN_SUCCESS, user);
                                                }
                                            }).addOnFailureListener(new OnFailureListener() {
                                                @Override
                                                public void onFailure(@NonNull Exception e) {
                                                    Log.w(TAG, "Error writing document", e);
                                                    mProgressDialog.hide();
                                                    Toast.makeText(LoginActivity.this, R.string.auth_failed,
                                                            Toast.LENGTH_SHORT).show();
                                                }
                                            });
                                        }
                                    }
                                }
                            });
                               /*     addSnapshotListener(new EventListener<DocumentSnapshot>() {
                                @Override
                                public void onEvent(@Nullable DocumentSnapshot snapshot,
                                                    @Nullable FirebaseFirestoreException e) {
                                    if (e != null) {

                                        Toast.makeText(LoginActivity.this,"db is empty",Toast.LENGTH_SHORT).show();
                                        Log.w(TAG, "Listen failed.", e);
                                        //return;
                                    }

                                }
                            });
*/
                        } else {
                            // Sign in failed, display a message and update the UI
                            Log.w(TAG, "signInWithCredential:failure", task.getException());
                            if (task.getException() instanceof FirebaseAuthInvalidCredentialsException) {
                                // The verification code entered was invalid
                                // [START_EXCLUDE silent]
                                mVerificationField.setError("Invalid code.");
                                // [END_EXCLUDE]
                            }
                            // [START_EXCLUDE silent]
                            // Update UI
                            updateUI(STATE_SIGNIN_FAILED);
                            // [END_EXCLUDE]
                        }
                    }
                });
    }
    // [END sign_in_with_phone]

    private void signOut() {
        mAuth.signOut();
        updateUI(STATE_INITIALIZED);
    }

    /*public void PutTitle_into_Search_SuggestionList(final String title_keyword){

        Map loadData=new HashMap();
        loadData.put("suggestion_keyword",title_keyword);
        mDatabase.collection("Search").document("suggestion_list").collection("List").document(mAuth.getUid()).set(loadData,SetOptions.merge()).addOnCompleteListener(new OnCompleteListener() {
            @Override
            public void onComplete(@NonNull Task task) {
                if (task.isSuccessful()){


                }else {
                    Toast.makeText(LoginActivity.this,getString(R.string.PLEASE_TRY_AGAIN),Toast.LENGTH_SHORT).show();
                }
            }
        });
    }*/


    public void PutTitle_into_Search_SuggestionList(final String title_keyword){
        final String[] listNo = new String[1];
        Log.e("hjdhfjhsdfskf","put title into search "+title_keyword);
        mDatabase.collection("Search").document("CurrentListNumber").get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()){
                    DocumentSnapshot documentSnapshot=task.getResult();
                    if (documentSnapshot.exists()){
                        if (documentSnapshot.contains("currentList_Number")){

                            listNo[0] = documentSnapshot.getString("currentList_Number");

                            getJSONobject(listNo[0],title_keyword);
                        }else {
                            getJSONobject("1",title_keyword);
                        }
                    }else {
                        getJSONobject("1",title_keyword);
                    }
                }
            }
        });

        /*Map loadData=new HashMap();
        loadData.put("suggestion_keyword",title_keyword);

        mFireStoreDatabase.collection("Search").document("suggestion_list").collection("List").
                document(StoryServerName).set(loadData,SetOptions.merge()).addOnCompleteListener(new OnCompleteListener() {
            @Override
            public void onComplete(@NonNull Task task) {
                if (task.isSuccessful()){


                }else {
                    FinalPublishChapterListing_();
                    Toast.makeText(WriteStoryActivity.this,getString(R.string.PLEASE_TRY_AGAIN),Toast.LENGTH_SHORT).show();
                }
            }
        });*/
    }

    private void getJSONobject(final String listNo, final String title_keyword) {
        Log.e("hjdhfjhsdfskf","we are inside current list number "+listNo);
        mDatabase.collection("Search").document("suggestion_list").collection("Multi_List"+listNo).
                document("List"+ listNo).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                if (task.isSuccessful()){
                    DocumentSnapshot documentSnapshot=task.getResult();
                    if (documentSnapshot.exists()){
                        if (documentSnapshot.contains("keywordList")){
                            String KeyWordJSON=""+documentSnapshot.get("keywordList");
                            Log.e("hjdhfjhsdfskf","this is json string "+KeyWordJSON);
                            SetSuggestionJSON(listNo,KeyWordJSON,title_keyword);

                        }else {
                            SetSuggestionJSON(listNo,null,title_keyword);
                        }
                    }else {
                        SetSuggestionJSON(listNo,null,title_keyword);
                    }
                }else {
                    SetSuggestionJSON(listNo,null,title_keyword);
                }
            }
        });
    }

    private void SetSuggestionJSON(String listNo,String keyWordJSON,String title_keyword) {
        Map<String, Object> docData = new HashMap<>();
        try{
            Map<String, Object> nestedData = new HashMap<>();
            if (keyWordJSON!=null) {
                Log.e("jfslkfl","this is json string "+keyWordJSON+" length of string is "+keyWordJSON.length());
                JSONObject json = new JSONObject(keyWordJSON);
                Log.e("sjkfjksf","size of json obje "+json.length());

                Iterator<String> iter = json.keys();
                //Log.e("jfslkfl","this is key string "+iter);
                while (iter.hasNext()) {
                    String key = iter.next();

                    try {
                        Object value = json.get(key);
                        Log.e("jfslkfl","this is value string "+value);
                        nestedData.put(key, value);
                    } catch (JSONException e) {
                        // Something went wrong!
                    }
                }
                if (json.length() >= Const.SUGGESTION_LIST_BOX) {
                    Map<String, Object> ListCounterData = new HashMap<>();
                    ListCounterData.put("currentList_Number", "" + (Integer.parseInt(listNo) + 1));
                    mDatabase.collection("Search").document("CurrentListNumber").set(ListCounterData, SetOptions.merge()).addOnCompleteListener(new OnCompleteListener<Void>() {
                        @Override
                        public void onComplete(@NonNull Task<Void> task) {

                        }
                    });
                }
            }


            String NameOf_user=Const.getFreshCapatibleStringToJson(title_keyword);
            nestedData.put(mAuth.getUid(),NameOf_user);
            docData.put("keywordList", nestedData);

            mDatabase.collection("Search").document("suggestion_list").collection("Multi_List"+listNo).
                    document("List"+ listNo).set(docData,SetOptions.merge()).addOnCompleteListener(new OnCompleteListener<Void>() {
                @Override
                public void onComplete(@NonNull Task<Void> task) {
                    if (task.isSuccessful()){
                        return;
                        //FinalPublishChapterListing_();
                    }else {
                        return;
                        //FinalPublishChapterListing_();
                        //Toast.makeText(WriteStoryActivity.this,getString(R.string.PLEASE_TRY_AGAIN),Toast.LENGTH_SHORT).show();
                    }
                }
            });

        }catch (JSONException e){
            Log.e("jfslkfl","this is json exception "+e.getMessage());
        }
    }



    private void updateUI(int uiState) {
        updateUI(uiState, mAuth.getCurrentUser(), null);
    }

    private void updateUI(FirebaseUser user) {
        if (user != null) {
            updateUI(STATE_SIGNIN_SUCCESS, user);
        } else {
            updateUI(STATE_INITIALIZED);
        }
    }

    private void updateUI(int uiState, FirebaseUser user) {
        updateUI(uiState, user, null);
    }

    private void updateUI(int uiState, PhoneAuthCredential cred) {
        updateUI(uiState, null, cred);
    }

    private void updateUI(int uiState, FirebaseUser user, PhoneAuthCredential cred) {
        switch (uiState) {
            case STATE_INITIALIZED:
                // Initialized state, show only the phone number field and start button
                enableViews(mStartButton, mPhoneNumberField);
                disableViews(mVerifyButton, mResendButton, mVerificationField);
                //mDetailText.setText(null);
                PhoneNumberLayout.setVisibility(View.VISIBLE);
                VerificationLayout.setVisibility(View.GONE);
                break;
            case STATE_CODE_SENT:
                // Code sent state, show the verification field, the

                enableViews(mVerifyButton, mResendButton, mPhoneNumberField, mVerificationField);
                disableViews(mStartButton);
                mProgressDialog.dismiss();
                mResendButton.setVisibility(View.VISIBLE);
                //mDetailText.setText(R.string.status_code_sent);
                //TextView text_two= (TextView) findViewById(R.id.second_text);
                /*TextView Verification_code= (TextView) findViewById(R.id.verification_text);*/
                OneText.setBackground(getResources().getDrawable(R.drawable.green_circle));
                OneText.setTextColor(Color.parseColor("#ffffff"));
                TwoText.setBackground(getResources().getDrawable(R.drawable.circle_background));
                first_line.setColorFilter(ContextCompat.getColor(LoginActivity.this, R.color.colorPrimary), android.graphics.PorterDuff.Mode.MULTIPLY);
                TwoText.setTextColor(Color.parseColor("#ffffff"));
                //mDetailText.setTextColor(Color.parseColor("#f4a817"));
                Verification_code.setText("Enter Verification Code");
                mStartButton.setVisibility(View.GONE);
                mVerifyButton.setVisibility(View.VISIBLE);
                PhoneNumberLayout.setVisibility(View.GONE);
                VerificationLayout.setVisibility(View.VISIBLE);

                break;
            case STATE_VERIFY_FAILED:
                // Verification has failed, show all options
                enableViews(mStartButton, mVerifyButton, mResendButton, mPhoneNumberField,
                        mVerificationField);
                // mDetailText.setText(R.string.status_verification_failed);
                Log.e("database","this is error "+R.string.status_verification_failed);
                Toast.makeText(LoginActivity.this,R.string.status_verification_failed+" Please check your internet connection and try again.",Toast.LENGTH_SHORT).show();
                //mDetailText.setTextColor(Color.parseColor("#dd2c00"));
                mProgressDialog.dismiss();
                //progressBar.setVisibility(View.GONE);
                mVerifyButton.setVisibility(View.GONE);
                mStartButton.setVisibility(View.VISIBLE);
                PhoneNumberLayout.setVisibility(View.VISIBLE);
                VerificationLayout.setVisibility(View.GONE);
                break;
            case STATE_VERIFY_SUCCESS:
                // Verification has succeeded, proceed to firebase sign in
                disableViews(mStartButton, mVerifyButton, mResendButton, mPhoneNumberField,
                        mVerificationField);
                //TextView text_tw= (TextView) findViewById(R.id.second_text);
                //TextView textView
                /*TextView Verification_code= (TextView) findViewById(R.id.verification_text);*/
                OneText.setBackground(getResources().getDrawable(R.drawable.green_circle));
                OneText.setTextColor(Color.parseColor("#ffffff"));
                TwoText.setBackground(getResources().getDrawable(R.drawable.green_circle));
                TwoText.setTextColor(Color.parseColor("#ffffff"));
                first_line.setColorFilter(ContextCompat.getColor(LoginActivity.this, R.color.colorPrimary),
                        android.graphics.PorterDuff.Mode.MULTIPLY);
                mProgressDialog.dismiss();
                //TextView text_three= (TextView) findViewById(R.id.third_text);
                ThreeText.setTextColor(Color.parseColor("#ffffff"));
                second_line.setColorFilter(ContextCompat.getColor(LoginActivity.this, R.color.colorPrimary),
                        android.graphics.PorterDuff.Mode.MULTIPLY);
                ThreeText.setBackground(getResources().getDrawable(R.drawable.circle_background));
                Verification_code.setText("Verfication Sucessfull");
                //mDetailText.setText("Verfication Sucessfull");
                Verification_code.setTextColor(Color.parseColor("#43a047"));
                //progressBar.setVisibility(View.INVISIBLE);
                mProgressDialog.dismiss();

                // Set the verification text based on the credential
                if (cred != null) {
                    if (cred.getSmsCode() != null) {
                        mVerificationField.setText(cred.getSmsCode());
                    } else {
                        mVerificationField.setText(R.string.instant_validation);
                        mVerificationField.setTextColor(Color.parseColor("#4bacb8"));
                    }
                }

                break;
            case STATE_SIGNIN_FAILED:
                // No-op, handled by sign-in check
                Toast.makeText(LoginActivity.this,""+R.string.status_sign_in_failed+" Please try again.",Toast.LENGTH_SHORT).show();
                //mDetailText.setText(R.string.status_sign_in_failed);
                //mDetailText.setTextColor(Color.parseColor("#dd2c00"));
                //progressBar.setVisibility(View.INVISIBLE);
                mProgressDialog.dismiss();
                break;
            case STATE_SIGNIN_SUCCESS:
                // Np-op, handled by sign-in check
                /*mStatusText.setText(R.string.signed_in);*/
                break;
        }

        if (user == null) {
            // Signed out
            mPhoneNumberViews.setVisibility(View.VISIBLE);
            mSignedInViews.setVisibility(View.GONE);

            /*mStatusText.setText(R.string.signed_out);*/
        } else {
            if (!callMain){
                callMain=true;

                Const.CURRENT_LANGUAGE = Const.GetLanguageFromSharedPref(LoginActivity.this);
                if (Const.CURRENT_LANGUAGE.equals("default")){
                    mProgressDialog.dismiss();
                    Intent LaunchChooseLanguage=new Intent(LoginActivity.this,ChooseLanguage.class);
                    startActivity(LaunchChooseLanguage);
                    finish();
                }else {


                    mDatabase.collection("Users").document(mAuth.getUid()).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                        @Override
                        public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                            if (task.isSuccessful()){
                                mProgressDialog.dismiss();
                                DocumentSnapshot documentSnapshot=task.getResult();

                                if (documentSnapshot.exists()){
                                    if (documentSnapshot.contains("name")){
                                        String UserName=documentSnapshot.getString("name");
                                        if (UserName.equals("New User")||UserName.length()==0){
                                            Log.e("slkdfjskf","this is if part ");
                                            Intent LaunchMain=new Intent(LoginActivity.this,EnterUserName.class);
                                            startActivity(LaunchMain);
                                            finish();

                                        }else {
                                            Log.e("slkdfjskf","this is if part UserName "+UserName);
                                            Intent LaunchMain=new Intent(LoginActivity.this,MainActivity.class);
                                            startActivity(LaunchMain);
                                            finish();
                                        }
                                    }
                                }
                                else {

                                }
                            }
                        }
                    });


                }

            }


        }
    }

    boolean callMain=false;
    private boolean validatePhoneNumber() {
        String phoneNumber = "+91"+mPhoneNumberField.getText().toString();
        if (TextUtils.isEmpty(phoneNumber)) {
            mPhoneNumberField.setError("Invalid phone number.");
            //mPhoneNumberField.setTextColor(Color.parseColor("#ff1744"));
            return false;
        }

        return true;
    }

    private void enableViews(View... views) {
        for (View v : views) {
            v.setEnabled(true);
        }
    }

    private void disableViews(View... views) {
        for (View v : views) {
            v.setEnabled(false);
        }
    }


    @Override
    public void onClick(View view) {

        switch (view.getId()) {
            case R.id.button_start_verification:

                if(CheckConnection()){

                   /* if (UserName.getText().toString().length()<0){
                        Toast.makeText(LoginActivity.this,getString(R.string.PLEASE_ENTER_YOUR_NAME),Toast.LENGTH_SHORT).show();
                        return;
                    }
*/
                    if (!validatePhoneNumber()) {
                        Toast.makeText(LoginActivity.this,getString(R.string.ENTER_VELID_NUMBER),Toast.LENGTH_SHORT).show();
                        return;
                    }
                    if (!TermConditionCheck.isChecked()){
                        Toast.makeText(LoginActivity.this,getString(R.string.PLEASE_ACCEPT_TERMS_AND_CONDITIOIN),Toast.LENGTH_SHORT).show();
                        return;
                    }


                    ///////hide keyboard start
                    InputMethodManager inputManager = (InputMethodManager)
                            getSystemService(Context.INPUT_METHOD_SERVICE);

                    inputManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),
                            InputMethodManager.HIDE_NOT_ALWAYS);
                    /////////hide keyboard end


                    mProgressDialog.show();
                    //mStatusText.setText("Authenticating....!");
                    //progressBar.setVisibility(View.VISIBLE);
                    startPhoneNumberVerification(mPhoneNumberField.getText().toString());

                }
                else{
                    ShowDialog();
                }
                break;
            case R.id.button_verify_phone:
                String code = mVerificationField.getText().toString();
                String finalNumber;
                if (TextUtils.isEmpty(code)) {
                    mVerificationField.setError("Cannot be empty.");
                    return;
                }
                mProgressDialog.show();
                verifyPhoneNumberWithCode(mVerificationId, code);

                break;
            case R.id.button_resend:
                Log.e("sdfsfs","Click on Otp resend");
                if(mPhoneNumberField.getText().length()<10){
                    Toast.makeText(LoginActivity.this,"Please Enter Valid Number",Toast.LENGTH_SHORT).show();
                }else {
                    resendVerificationCode("+91"+mPhoneNumberField.getText().toString(), mResendToken);
                }

                break;
            case R.id.sign_out_button:
                signOut();
                break;
        }
    }

    private void ShowDialog(){
        AlertDialog.Builder builderInner = new AlertDialog.Builder(LoginActivity.this);
        builderInner.setTitle("Please Open Internet Connection");

        builderInner.setNegativeButton("Ok", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        builderInner.show();
    }


    public boolean CheckConnection(){
        boolean isConnection;
        ConnectivityManager conMgr =  (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = conMgr.getActiveNetworkInfo();
        if (netInfo == null){
            isConnection=false;
        }else{
            isConnection=true;
        }
        return isConnection;
    }



}